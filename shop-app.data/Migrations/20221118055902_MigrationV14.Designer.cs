// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using shop_app.data.Concrete.EfCore;

#nullable disable

namespace shopapp.data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20221118055902_MigrationV14")]
    partial class MigrationV14
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("shop_app.entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f869e2ab-6007-47cf-9e35-ba5d176dc5ef"),
                            Name = "Telefon",
                            URL = "telefon"
                        },
                        new
                        {
                            Id = new Guid("21754c4b-1477-4ef2-9f43-715211c166c4"),
                            Name = "Bilgisayar",
                            URL = "bilgisayar"
                        },
                        new
                        {
                            Id = new Guid("7f3366b7-951d-4119-8483-c2734d4ce6a7"),
                            Name = "TV",
                            URL = "telefon"
                        },
                        new
                        {
                            Id = new Guid("ea6e9239-6052-4f0a-9776-bb0063bb71f4"),
                            Name = "Beyaz Eşya",
                            URL = "telefon"
                        },
                        new
                        {
                            Id = new Guid("6b47cf74-690b-4ceb-9cb2-652428a1f633"),
                            Name = "Hobi",
                            URL = "telefon"
                        });
                });

            modelBuilder.Entity("shop_app.entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("shop_app.entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(12,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("130b6119-b19d-4912-a045-38c5978408d8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Iphone 13, temiz kullanılmış yalnızca ciddi alıcılar",
                            ImageUrl = "iphone.png",
                            Name = "Sahibinden temiz İphone",
                            Price = 10000.00m
                        },
                        new
                        {
                            Id = new Guid("f3207307-5799-4597-91bc-10b0f4f788d4"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ciddi alıcılar",
                            ImageUrl = "mbook.png",
                            Name = "Temiz kullanılmış Macbook M1 Air",
                            Price = 20000.00m
                        },
                        new
                        {
                            Id = new Guid("a87d42c9-1ac9-437f-9485-15ddd01f2ca5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Duvara as, tablo diye izle",
                            ImageUrl = "lgtv.png",
                            Name = "LG nin incecik televizyonu",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = new Guid("fb5d95da-7045-4a6c-b3e4-da142ee676b5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Güzel soğutur, benim cesedi 10 gün sakladı",
                            ImageUrl = "arcelik.png",
                            Name = "Buz Dolabı",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = new Guid("a0f50f65-717f-4ebb-93ab-4c193ba87d65"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hobi amaçlı matkap",
                            ImageUrl = "matkap.png",
                            Name = "Matkap",
                            Price = 100.00m
                        });
                });

            modelBuilder.Entity("shop_app.entity.ProductCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("f869e2ab-6007-47cf-9e35-ba5d176dc5ef"),
                            ProductId = new Guid("130b6119-b19d-4912-a045-38c5978408d8"),
                            Id = new Guid("e0328ef8-ed9d-4e16-95ab-bd8543d27b5d")
                        },
                        new
                        {
                            CategoryId = new Guid("21754c4b-1477-4ef2-9f43-715211c166c4"),
                            ProductId = new Guid("f3207307-5799-4597-91bc-10b0f4f788d4"),
                            Id = new Guid("ad83faaa-bf9c-49ed-a405-7986605abfb2")
                        },
                        new
                        {
                            CategoryId = new Guid("7f3366b7-951d-4119-8483-c2734d4ce6a7"),
                            ProductId = new Guid("a87d42c9-1ac9-437f-9485-15ddd01f2ca5"),
                            Id = new Guid("3b4d9f6a-8aa8-4c93-a0a0-8148e366c31e")
                        },
                        new
                        {
                            CategoryId = new Guid("ea6e9239-6052-4f0a-9776-bb0063bb71f4"),
                            ProductId = new Guid("fb5d95da-7045-4a6c-b3e4-da142ee676b5"),
                            Id = new Guid("8fecbb50-8ff7-42b4-a290-4126212efdaa")
                        },
                        new
                        {
                            CategoryId = new Guid("6b47cf74-690b-4ceb-9cb2-652428a1f633"),
                            ProductId = new Guid("a0f50f65-717f-4ebb-93ab-4c193ba87d65"),
                            Id = new Guid("a66d2a58-d500-4cde-a1b3-daa07387d71d")
                        });
                });

            modelBuilder.Entity("shop_app.entity.Order", b =>
                {
                    b.HasOne("shop_app.entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shop_app.entity.ProductCategory", b =>
                {
                    b.HasOne("shop_app.entity.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop_app.entity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shop_app.entity.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("shop_app.entity.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
